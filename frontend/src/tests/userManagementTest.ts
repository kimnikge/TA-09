// –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò (TypeScript)
// –î–∞—Ç–∞: 1 –∞–≤–≥—É—Å—Ç–∞ 2025

import { supabase } from '../supabaseClient';

interface TestUser {
  id: string;
  email: string;
  name: string;
  role: string;
  approved: boolean;
}

class UserManagementTest {
  private testUsers: TestUser[] = [];

  // ===== –¢–ï–°–¢ 1: –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====
  async createTestUser(): Promise<TestUser | null> {
    try {
      console.log('üß™ –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      
      const testEmail = `test_user_${Date.now()}@test.com`;
      const testUser = {
        id: crypto.randomUUID(),
        email: testEmail,
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        role: 'sales_rep',
        approved: false
      };

      const { data, error } = await supabase
        .from('profiles')
        .insert(testUser)
        .select()
        .single();

      if (error) {
        console.error('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
      }

      console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', data);
      this.testUsers.push(data);
      return data;
    } catch (err) {
      console.error('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:', err);
      return null;
    }
  }

  // ===== –¢–ï–°–¢ 2: –ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====
  async activateUser(userId: string): Promise<boolean> {
    try {
      console.log('üß™ –¢–ï–°–¢: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId);
      
      const { data, error } = await supabase
        .from('profiles')
        .update({ approved: true })
        .eq('id', userId)
        .select()
        .single();

      if (error) {
        console.error('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
        return false;
      }

      if (data.approved === true) {
        console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', data.email);
        return true;
      } else {
        console.error('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
        return false;
      }
    } catch (err) {
      console.error('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', err);
      return false;
    }
  }

  // ===== –¢–ï–°–¢ 3: –ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====
  async blockUser(userId: string): Promise<boolean> {
    try {
      console.log('üß™ –¢–ï–°–¢: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId);
      
      const { data, error } = await supabase
        .from('profiles')
        .update({ approved: false })
        .eq('id', userId)
        .select()
        .single();

      if (error) {
        console.error('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
        return false;
      }

      if (data.approved === false) {
        console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:', data.email);
        return true;
      } else {
        console.error('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
        return false;
      }
    } catch (err) {
      console.error('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ:', err);
      return false;
    }
  }

  // ===== –¢–ï–°–¢ 4: –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =====
  async fetchUsers(): Promise<TestUser[]> {
    try {
      console.log('üß™ –¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      
      const { data, error } = await supabase
        .from('profiles')
        .select('id, email, name, role, approved')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        return [];
      }

      console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', data?.length || 0);
      return data || [];
    } catch (err) {
      console.error('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏:', err);
      return [];
    }
  }

  // ===== –¢–ï–°–¢ 5: –£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====
  async deleteUser(userId: string): Promise<boolean> {
    try {
      console.log('üß™ –¢–ï–°–¢: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId);
      
      const { error } = await supabase
        .from('profiles')
        .delete()
        .eq('id', userId);

      if (error) {
        console.error('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        return false;
      }

      console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω');
      return true;
    } catch (err) {
      console.error('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', err);
      return false;
    }
  }

  // ===== –¢–ï–°–¢ 6: –ü–†–û–í–ï–†–ö–ê RLS –ü–û–õ–ò–¢–ò–ö =====
  async testRLSPolicies(): Promise<boolean> {
    try {
      console.log('üß™ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS –ø–æ–ª–∏—Ç–∏–∫...');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const { data, error } = await supabase
        .from('profiles')
        .select('id, email')
        .limit(1);

      if (error && error.code === 'PGRST116') {
        console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: RLS –±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø');
        return true;
      } else if (data) {
        console.log('‚ö†Ô∏è –¢–ï–°–¢: RLS –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –ø–æ–ª–∏—Ç–∏–∫–∏ —Å–ª–∏—à–∫–æ–º –æ—Ç–∫—Ä—ã—Ç—ã');
        return true;
      } else {
        console.error('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ RLS:', error);
        return false;
      }
    } catch (err) {
      console.error('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ RLS:', err);
      return false;
    }
  }

  // ===== –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• =====
  async cleanupTestUsers(): Promise<void> {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    for (const user of this.testUsers) {
      await this.deleteUser(user.id);
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ email
    const { error } = await supabase
      .from('profiles')
      .delete()
      .like('email', 'test_user_%@test.com');

    if (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—á–∏—â–µ–Ω—ã');
    }
    
    this.testUsers = [];
  }

  // ===== –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í =====
  async runAllTests(): Promise<void> {
    console.log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò');
    console.log('='.repeat(70));

    let passedTests = 0;
    let totalTests = 0;

    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    totalTests++;
    const testUser = await this.createTestUser();
    if (testUser) passedTests++;

    if (!testUser) {
      console.log('‚ùå –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    // –¢–µ—Å—Ç 2: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    totalTests++;
    const activated = await this.activateUser(testUser.id);
    if (activated) passedTests++;

    // –¢–µ—Å—Ç 3: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    totalTests++;
    const blocked = await this.blockUser(testUser.id);
    if (blocked) passedTests++;

    // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
    totalTests++;
    const users = await this.fetchUsers();
    if (users.length > 0) {
      console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω');
      passedTests++;
    }

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS
    totalTests++;
    const rlsWorking = await this.testRLSPolicies();
    if (rlsWorking) passedTests++;

    // –¢–µ—Å—Ç 6: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    totalTests++;
    const deleted = await this.deleteUser(testUser.id);
    if (deleted) passedTests++;

    // –û—á–∏—Å—Ç–∫–∞
    await this.cleanupTestUsers();

    // –ò—Ç–æ–≥–∏
    console.log('='.repeat(70));
    console.log(`üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalTests - passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤`);
    
    if (passedTests === totalTests) {
      console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    } else {
      console.log('‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.');
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const userManagementTest = new UserManagementTest();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
export const runUserManagementTests = () => {
  return userManagementTest.runAllTests();
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ development —Ä–µ–∂–∏–º–µ
if (process.env.NODE_ENV === 'development') {
  // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
  // setTimeout(() => runUserManagementTests(), 2000);
}
