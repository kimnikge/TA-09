import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://olutrxiazrmanrgzzwmb.supabase.co'
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9sdXRyeGlhenJtYW5yZ3p6d21iIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA4NzMwMjEsImV4cCI6MjA2NjQ0OTAyMX0.qxU_1Fjk4Mu9vMSfEI4jSGm3yYhh9WbmlSEFttOMKiM'

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º realtime
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    storage: {
      getItem: (key: string) => {
        try {
          return localStorage.getItem(key)
        } catch (error) {
          console.warn('–û—à–∏–±–∫–∞ localStorage getItem:', error)
          return null
        }
      },
      setItem: (key: string, value: string) => {
        try {
          localStorage.setItem(key, value)
        } catch (error) {
          console.warn('–û—à–∏–±–∫–∞ localStorage setItem:', error)
        }
      },
      removeItem: (key: string) => {
        try {
          localStorage.removeItem(key)
        } catch (error) {
          console.warn('–û—à–∏–±–∫–∞ localStorage removeItem:', error)
        }
      }
    }
  },
  global: {
    headers: {
      'apikey': supabaseAnonKey
    }
  }
})

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ realtime —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
try {
  if (supabase.realtime) {
    supabase.realtime.disconnect()
    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    supabase.realtime.removeAllChannels()
  }
} catch (error) {
  console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ realtime:', error)
}

// –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
supabase.channel = () => {
  console.warn('üö´ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è realtime –∫–∞–Ω–∞–ª–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞')
  return {
    on: () => ({ unsubscribe: () => {} }),
    subscribe: () => 'SUBSCRIBED',
    unsubscribe: () => 'UNSUBSCRIBED',
    send: () => {},
    track: () => {},
    untrack: () => {},
    presence: { state: {} },
    socket: null
  } as unknown as ReturnType<typeof supabase.channel>
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
export const clearInvalidTokens = async () => {
  try {
    const { error } = await supabase.auth.getSession()
    
    if (error && error.message.includes('refresh_token_not_found')) {
      // –û—á–∏—â–∞–µ–º localStorage –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
      localStorage.clear()
      await supabase.auth.signOut()
      console.log('üßπ –û—á–∏—â–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ refresh —Ç–æ–∫–µ–Ω—ã')
      return true
    }
    
    if (error && error.message.includes('Invalid Refresh Token')) {
      // –û—á–∏—â–∞–µ–º localStorage –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
      localStorage.clear()
      await supabase.auth.signOut()
      console.log('üßπ –û—á–∏—â–µ–Ω—ã –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã')
      return true
    }
    
    return false
  } catch (error) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–æ–∫–µ–Ω–æ–≤:', error)
    localStorage.clear()
    await supabase.auth.signOut()
    return true
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
export const getSessionSafely = async () => {
  try {
    const { data: { session }, error } = await supabase.auth.getSession()
    
    if (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏:', error)
      await clearInvalidTokens()
      return null
    }
    
    return session
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏:', error)
    await clearInvalidTokens()
    return null
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
export const refreshTokenSafely = async () => {
  try {
    const { data, error } = await supabase.auth.refreshSession()
    
    if (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
      await clearInvalidTokens()
      return null
    }
    
    return data.session
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
    await clearInvalidTokens()
    return null
  }
}

// –¢–∏–ø—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export interface Profile {
  id: string
  email: string
  name: string
  role: 'admin' | 'sales_rep'
  approved: boolean
  created_at: string
  updated_at: string
}

export interface Client {
  id: string
  name: string
  phone: string
  address: string
  created_by: string
  created_at: string
}

export interface Product {
  id: string
  name: string
  price: number
  description: string
  created_at: string
}

export interface Order {
  id: string
  client_id: string
  sales_rep_id: string
  status: 'pending' | 'confirmed' | 'completed' | 'cancelled'
  total_amount: number
  created_at: string
  items: OrderItem[]
}

export interface OrderItem {
  id: string
  order_id: string
  product_id: string
  quantity: number
  price: number
}
