/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤ production
 */

export enum LogLevel {
  DEBUG = 0,
  INFO = 1,
  WARN = 2,
  ERROR = 3,
  NONE = 4
}

type LogData = Record<string, unknown> | string | number | boolean | null | undefined;

interface LogEntry {
  level: LogLevel;
  message: string;
  data?: LogData;
  timestamp: Date;
  component?: string;
}

interface ErrorReport extends LogEntry {
  userAgent: string;
  url: string;
}

class Logger {
  private currentLevel: LogLevel;
  private isDevelopment: boolean;
  private logs: LogEntry[] = [];
  private maxLogs = 100; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏

  constructor() {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
    this.isDevelopment = typeof import.meta !== 'undefined' && 
                        import.meta.env && 
                        import.meta.env.DEV === true;
    
    // –í production –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ERROR –∏ –≤—ã—à–µ
    // –í development –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
    this.currentLevel = this.isDevelopment ? LogLevel.DEBUG : LogLevel.ERROR;
    
    // –í production –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –æ—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é
    if (!this.isDevelopment && this.isMobileDevice()) {
      this.currentLevel = LogLevel.NONE;
    }
  }

  private isMobileDevice(): boolean {
    if (typeof window === 'undefined') return false;
    return /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  }

  private shouldLog(level: LogLevel): boolean {
    return level >= this.currentLevel;
  }

  private formatMessage(level: LogLevel, component: string | undefined, message: string): string {
    const emoji = this.getLevelEmoji(level);
    const prefix = component ? `${emoji} ${component}:` : `${emoji}`;
    return `${prefix} ${message}`;
  }

  private getLevelEmoji(level: LogLevel): string {
    switch (level) {
      case LogLevel.DEBUG: return 'üîç';
      case LogLevel.INFO: return 'üìã';
      case LogLevel.WARN: return '‚ö†Ô∏è';
      case LogLevel.ERROR: return '‚ùå';
      default: return 'üìù';
    }
  }

  private log(level: LogLevel, message: string, data?: LogData, component?: string): void {
    if (!this.shouldLog(level)) return;

    const logEntry: LogEntry = {
      level,
      message,
      data,
      timestamp: new Date(),
      component
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤
    this.logs.push(logEntry);
    if (this.logs.length > this.maxLogs) {
      this.logs.shift();
    }

    const formattedMessage = this.formatMessage(level, component, message);

    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
    switch (level) {
      case LogLevel.DEBUG:
        console.debug(formattedMessage, data);
        break;
      case LogLevel.INFO:
        console.log(formattedMessage, data);
        break;
      case LogLevel.WARN:
        console.warn(formattedMessage, data);
        break;
      case LogLevel.ERROR:
        console.error(formattedMessage, data);
        // –í production –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
        if (!this.isDevelopment) {
          this.reportToExternalService(logEntry);
        }
        break;
    }
  }

  private reportToExternalService(logEntry: LogEntry): void {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å Sentry, LogRocket –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–∏—Å–æ–º
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    try {
      const errorReports = JSON.parse(localStorage.getItem('errorReports') || '[]');
      errorReports.push({
        ...logEntry,
        userAgent: navigator.userAgent,
        url: window.location.href
      });
      
      // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—à–∏–±–æ–∫
      if (errorReports.length > 10) {
        errorReports.shift();
      }
      
      localStorage.setItem('errorReports', JSON.stringify(errorReports));
    } catch {
      // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
  debug(message: string, data?: LogData, component?: string): void {
    this.log(LogLevel.DEBUG, message, data, component);
  }

  info(message: string, data?: LogData, component?: string): void {
    this.log(LogLevel.INFO, message, data, component);
  }

  warn(message: string, data?: LogData, component?: string): void {
    this.log(LogLevel.WARN, message, data, component);
  }

  error(message: string, data?: LogData, component?: string): void {
    this.log(LogLevel.ERROR, message, data, component);
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤
  api(message: string, data?: LogData): void {
    this.info(message, data, 'API');
  }

  auth(message: string, data?: LogData): void {
    this.info(message, data, 'AUTH');
  }

  db(message: string, data?: LogData): void {
    this.info(message, data, 'DATABASE');
  }

  ui(message: string, data?: LogData): void {
    this.debug(message, data, 'UI');
  }

  // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  setLevel(level: LogLevel): void {
    this.currentLevel = level;
  }

  getLogs(): LogEntry[] {
    return [...this.logs];
  }

  clearLogs(): void {
    this.logs = [];
  }

  getErrorReports(): ErrorReport[] {
    try {
      return JSON.parse(localStorage.getItem('errorReports') || '[]');
    } catch {
      return [];
    }
  }

  clearErrorReports(): void {
    localStorage.removeItem('errorReports');
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  getCurrentLevel(): LogLevel {
    return this.currentLevel;
  }

  getIsDevelopment(): boolean {
    return this.isDevelopment;
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
export const logger = new Logger();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–¥–æ–±–Ω—ã–µ –∞–ª–∏–∞—Å—ã
export const log = {
  debug: (message: string, data?: LogData, component?: string) => logger.debug(message, data, component),
  info: (message: string, data?: LogData, component?: string) => logger.info(message, data, component),
  warn: (message: string, data?: LogData, component?: string) => logger.warn(message, data, component),
  error: (message: string, data?: LogData, component?: string) => logger.error(message, data, component),
  api: (message: string, data?: LogData) => logger.api(message, data),
  auth: (message: string, data?: LogData) => logger.auth(message, data),
  db: (message: string, data?: LogData) => logger.db(message, data),
  ui: (message: string, data?: LogData) => logger.ui(message, data),
};

export default logger;
