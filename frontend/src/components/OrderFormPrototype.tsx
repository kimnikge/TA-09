import { useState, useEffect } from 'react';
import { ShoppingCart, Plus, User, Package, Send, X } from 'lucide-react';
import { supabase } from '../supabaseClient';
import ProductSearch from './ProductSearch';
import CompactProductCard from './CompactProductCard';

interface Product {
  id: string; // UUID –≤ Supabase
  name: string;
  price: number;
  unit: string | null;
  category: string;
  image_url?: string | null;
  active?: boolean;
}

interface Client {
  id: string; // UUID –≤ Supabase
  name: string;
  address: string;
  created_by?: string | null;
  created_at?: string;
}

interface Cart {
  [productId: string]: number;
}

interface Comments {
  [productId: string]: string;
}

interface OrderFormProps {
  currentUser: {
    id: string;
    name: string;
    email: string;
  };
  userRole: 'admin' | 'sales_rep';
}

const OrderFormPrototype: React.FC<OrderFormProps> = ({ currentUser, userRole }) => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const currentAgent = {
    id: currentUser.id,
    name: currentUser.name,
    email: currentUser.email
  };

  // –°—Ç–µ–π—Ç—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase
  const [clients, setClients] = useState<Client[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [categories, setCategories] = useState<{ id: string; name: string }[]>([]);
  const [loading, setLoading] = useState(true);
  const [loadingMessage, setLoadingMessage] = useState('');

  const [selectedClient, setSelectedClient] = useState<string>('');
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
  const deliveryDate = (() => {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    return tomorrow.toISOString().split('T')[0];
  })();
  
  const [selectedCategory, setSelectedCategory] = useState<string>('beverages');
  const [cart, setCart] = useState<Cart>({});
  const [comments, setComments] = useState<Comments>({});
  const [showNewClientModal, setShowNewClientModal] = useState<boolean>(false);
  const [showImageModal, setShowImageModal] = useState<boolean>(false);
  const [selectedImage, setSelectedImage] = useState<string>('');
  const [newClient, setNewClient] = useState<{
    name: string;
    address: string;
  }>({
    name: '',
    address: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<string | null>(null);
  const [addedProductNotification, setAddedProductNotification] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase
  useEffect(() => {
    const loadDataOnMount = async () => {
      try {
        setLoading(true);
        setLoadingMessage('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
        const { data: clientsData, error: clientsError } = await supabase
          .from('clients')
          .select('*')
          .order('name');

        if (clientsError) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:', clientsError);
          setClients([]);
        } else {
          setClients(clientsData || []);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        console.log('üîç OrderForm: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–æ–≤...');
        const { data: productsData, error: productsError } = await supabase
          .from('products')
          .select('*')
          .neq('active', false) // –ò—Å–∫–ª—é—á–∞–µ–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
          .order('category', { ascending: true })
          .order('name', { ascending: true });

        console.log('üì¶ OrderForm: –¢–æ–≤–∞—Ä—ã –∏–∑ –ë–î:', productsData);
        console.log('‚ùå OrderForm: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', productsError);

        if (productsError) {
          console.error('‚ùå OrderForm: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', productsError);
          setProducts([]);
        } else {
          console.log(`‚úÖ OrderForm: –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${(productsData || []).length}`);
          setProducts(productsData || []);
        }

        // –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        const uniqueCategories = [...new Set((productsData || []).map(p => p.category))];
        const categoryList = uniqueCategories.map(cat => ({
          id: cat,
          name: getCategoryName(cat)
        }));
        setCategories(categoryList);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—É—é, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
        if (categoryList.length > 0 && !selectedCategory) {
          setSelectedCategory(categoryList[0].id);
        }

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      } finally {
        setLoading(false);
        setLoadingMessage('');
      }
    };

    loadDataOnMount();
  }, [selectedCategory]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const getCategoryName = (categoryId: string): string => {
    const categoryNames: { [key: string]: string } = {
      'beverages': '–ù–∞–ø–∏—Ç–∫–∏',
      'snacks': '–°–Ω–µ–∫–∏',
      'dairy': '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
      'household': '–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è',
      'food': '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è',
      'bakery': '–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è',
      'meat': '–ú—è—Å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
      'frozen': '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã'
    };
    return categoryNames[categoryId] || categoryId;
  };

  const updateQuantity = (productId: string, change: number) => {
    const product = products.find(p => p.id === productId);
    console.log('OrderForm: updateQuantity –≤—ã–∑–≤–∞–Ω', { productId, change, productName: product?.name });
    
    setCart(prev => {
      const newCart = { ...prev };
      const currentQty = newCart[productId] || 0;
      const newQty = Math.max(0, currentQty + change);
      
      if (newQty === 0) {
        delete newCart[productId];
      } else {
        newCart[productId] = newQty;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
        if (change > 0 && product) {
          setAddedProductNotification(`${product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`);
          setTimeout(() => setAddedProductNotification(null), 3000);
        }
      }
      
      console.log('OrderForm: –∫–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', newCart);
      return newCart;
    });
  };

  const setQuantityDirectly = (productId: string, value: string) => {
    const product = products.find(p => p.id === productId);
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (value === '') {
      setCart(prev => {
        const newCart = { ...prev };
        newCart[productId] = 0; // –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0 –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return newCart;
      });
      return;
    }
    
    const qty = parseInt(value) || 0;
    setCart(prev => {
      const newCart = { ...prev };
      
      if (qty <= 0) {
        delete newCart[productId];
        if (product && value !== '') {
          setAddedProductNotification(`${product.name} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã`);
          setTimeout(() => setAddedProductNotification(null), 3000);
        }
      } else {
        newCart[productId] = qty;
      }
      
      return newCart;
    });
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
  const handleQuantityBlur = (productId: string, value: string) => {
    const qty = parseInt(value) || 0;
    if (qty <= 0) {
      // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ 0, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º—É–º 1
      setCart(prev => {
        const newCart = { ...prev };
        newCart[productId] = 1;
        return newCart;
      });
    }
  };

  const addNewClient = async () => {
    if (!newClient.name || !newClient.address) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞');
      return;
    }

    setIsSubmitting(true);
    
    try {
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { data: createdClient, error: clientError } = await supabase
        .from('clients')
        .insert([
          {
            name: newClient.name.trim(),
            address: newClient.address.trim(),
            created_by: currentAgent.id
          }
        ])
        .select()
        .single();

      if (clientError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', clientError);
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${clientError.message}`);
      }

      if (!createdClient) {
        throw new Error('–ö–ª–∏–µ–Ω—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
      }

      console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', createdClient);

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
      const newClientData: Client = {
        id: createdClient.id,
        name: createdClient.name,
        address: createdClient.address,
        created_by: createdClient.created_by,
        created_at: createdClient.created_at
      };

      setClients(prev => [...prev, newClientData]);
      setSelectedClient(createdClient.id);
      setShowNewClientModal(false);
      setNewClient({ name: '', address: '' });
      
      alert('–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${errorMessage}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleSubmitOrder = async () => {
    if (!selectedClient || Object.keys(cart).length === 0) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑');
      return;
    }
    
    if (!currentAgent.id) {
      alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
    const clientExists = clients.find(c => c.id === selectedClient);
    if (!clientExists) {
      alert('–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
      return;
    }
    
    setIsSubmitting(true);
    setSubmitStatus(null);
    
    try {
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:', clientExists.name, 'ID:', selectedClient);
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { data: clientCheck, error: clientCheckError } = await supabase
        .from('clients')
        .select('id, name')
        .eq('id', selectedClient)
        .single();

      if (clientCheckError || !clientCheck) {
        console.error('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', clientCheckError);
        throw new Error('–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–Ω–æ–≤–æ.');
      }

      console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', clientCheck.name);

      // 2. –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
      const orderData = {
        rep_id: currentAgent.id,
        client_id: selectedClient,
        delivery_date: deliveryDate,
        total_items: getTotalItems(),
        total_price: getTotalPrice()
      };

      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', orderData);

      const { data: order, error: orderError } = await supabase
        .from('orders')
        .insert([orderData])
        .select()
        .single();

      if (orderError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', orderError);
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${orderError.message}`);
      }
      
      if (!order) {
        throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
      }

      console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', order.id);

      // 2. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
      const items = Object.entries(cart).map(([productId, qty]) => {
        const product = products.find(p => p.id === productId);
        if (!product) {
          throw new Error(`–¢–æ–≤–∞—Ä —Å ID ${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        
        return {
          order_id: order.id,
          product_id: productId,
          quantity: qty,
          price: product.price,
          unit: product.unit || '—à—Ç',
          comment: comments[productId] || ''
        };
      });

      const { error: itemsError } = await supabase.from('order_items').insert(items);
      
      if (itemsError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:', itemsError);
        // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        await supabase.from('orders').delete().eq('id', order.id);
        throw new Error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: ${itemsError.message}`);
      }

      setSubmitStatus('success');
      setCart({});
      setComments({});
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setSubmitStatus('error');
      alert(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: ${errorMessage}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getTotalItems = (): number => {
    return Object.values(cart).reduce((sum: number, qty: number) => sum + qty, 0);
  };

  const getTotalPrice = (): number => {
    return Object.entries(cart).reduce((sum: number, [productId, qty]: [string, number]) => {
      const product = products.find(p => p.id === productId);
      return sum + (product ? product.price * qty : 0);
    }, 0);
  };

  const currentProducts: Product[] = products.filter(p => p.category === selectedCategory);
  const selectedClientData = clients.find(c => c.id === selectedClient);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4 flex items-center justify-center">
        <div className="bg-white rounded-lg shadow-lg p-8 text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">{loadingMessage || '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-4xl mx-auto">
        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ */}
        {addedProductNotification && (
          <div className="fixed top-4 right-4 z-50 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg animate-pulse">
            <div className="flex items-center gap-2">
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
              {addedProductNotification}
            </div>
          </div>
        )}
        
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <ShoppingCart className="text-blue-600" size={28} />
              <div>
                <h1 className="text-2xl font-bold text-gray-800">–§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞</h1>
                <p className="text-gray-600">–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫</p>
              </div>
            </div>
            <div className="text-right">
              <p className="text-sm text-gray-500">
                {userRole === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:' : '–¢–æ—Ä–≥–æ–≤—ã–π –∞–≥–µ–Ω—Ç:'}
              </p>
              <p className="font-semibold text-gray-800">{currentAgent.name}</p>
              <p className="text-xs text-gray-500">{currentAgent.email}</p>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –§–æ—Ä–º–∞ */}
          <div className="lg:col-span-2 space-y-6">
            
            {/* –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ */}
            <div className="bg-white rounded-lg shadow-lg p-6">
              <div className="flex items-center gap-2 mb-4">
                <Package className="text-blue-600" size={20} />
                <h2 className="text-lg font-semibold">–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</h2>
              </div>
              
              {/* –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
              <div className="mb-6">
                <ProductSearch
                  products={products}
                  onProductSelect={(product) => {
                    console.log('OrderForm: –ø–æ–ª—É—á–µ–Ω —Ç–æ–≤–∞—Ä –∏–∑ –ø–æ–∏—Å–∫–∞', product.name);
                    updateQuantity(product.id, 1);
                  }}
                  placeholder="–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
                />
              </div>
              
              {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
              <div className="mb-6">
                <h3 className="text-sm font-medium text-gray-700 mb-3">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤</h3>
                <div className="flex flex-wrap gap-2">
                  {categories.map(category => (
                    <button
                      key={category.id}
                      onClick={() => setSelectedCategory(category.id)}
                      className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 flex items-center gap-2 ${
                        selectedCategory === category.id
                          ? 'bg-blue-600 text-white shadow-md'
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200 hover:shadow-sm'
                      }`}
                    >
                      <span className="text-base">
                        {category.name.includes('–ú–æ–ª–æ—á–Ω') && 'ü•õ'}
                        {category.name.includes('–•–ª–µ–±') && 'üçû'}
                        {category.name.includes('–ú—è—Å') && 'ü•©'}
                        {category.name.includes('–û–≤–æ—â') && 'ü•¨'}
                        {category.name.includes('–§—Ä—É–∫—Ç') && 'üçé'}
                        {category.name.includes('–ù–∞–ø–∏—Ç–∫') && 'ü•§'}
                        {category.name.includes('–ö–æ–Ω–¥') && 'üç´'}
                        {category.name.includes('–†—ã–±') && 'üêü'}
                        {category.name.includes('–ê–ª–∫–æ') && 'üç∑'}
                        {(!category.name.includes('–ú–æ–ª–æ—á–Ω') && 
                          !category.name.includes('–•–ª–µ–±') && 
                          !category.name.includes('–ú—è—Å') && 
                          !category.name.includes('–û–≤–æ—â') && 
                          !category.name.includes('–§—Ä—É–∫—Ç') && 
                          !category.name.includes('–ù–∞–ø–∏—Ç–∫') && 
                          !category.name.includes('–ö–æ–Ω–¥') && 
                          !category.name.includes('–†—ã–±') && 
                          !category.name.includes('–ê–ª–∫–æ')) && 'üì¶'}
                      </span>
                      <span>{category.name}</span>
                      <span className={`text-xs px-2 py-0.5 rounded-full ${
                        selectedCategory === category.id
                          ? 'bg-white/20 text-white'
                          : 'bg-gray-200 text-gray-500'
                      }`}>
                        {products.filter(p => p.category === category.id).length}
                      </span>
                    </button>
                  ))}
                </div>
              </div>

              {/* –¢–æ–≤–∞—Ä—ã - –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
              <div className="grid grid-cols-2 lg:grid-cols-3 gap-4 max-h-96 overflow-y-auto p-1">
                {currentProducts.map((product: Product) => (
                  <CompactProductCard
                    key={product.id}
                    product={product}
                    quantity={cart[product.id] || 0}
                    comment={comments[product.id] || ''}
                    onQuantityChange={updateQuantity}
                    onQuantitySet={setQuantityDirectly}
                    onCommentChange={(productId, comment) => 
                      setComments(prev => ({ ...prev, [productId]: comment }))
                    }
                    onImageClick={(imageUrl) => {
                      setSelectedImage(imageUrl);
                      setShowImageModal(true);
                    }}
                  />
                ))}
              </div>
              
              {/* –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ */}
              <div className="mt-4 text-sm text-gray-500 text-center">
                –ü–æ–∫–∞–∑–∞–Ω–æ {currentProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{categories.find(c => c.id === selectedCategory)?.name}"
              </div>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ */}
            <div className="bg-white rounded-lg shadow-lg p-6">
              <div className="flex items-center gap-2 mb-4">
                <User className="text-blue-600" size={20} />
                <h2 className="text-lg font-semibold">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</h2>
              </div>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –ø—Ä–æ–¥–∞–∂
                  </label>
                  
                  {/* –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤ */}
                  <div className="relative">
                    <select 
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent appearance-none bg-white"
                      value={selectedClient}
                      onChange={(e) => setSelectedClient(e.target.value)}
                    >
                      <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞...</option>
                      {clients.map(client => {
                        // –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        const nameParts = client.name.split(' - ');
                        const company = nameParts[0]?.replace(/^(–ò–ü\s*|–ö–æ–º–ø–∞–Ω–∏—è\s*|–¢–û–û\s*)/i, '').trim() || '';
                        const shop = nameParts.slice(1).join(' - ') || client.name;
                        
                        return (
                          <option key={client.id} value={client.id}>
                            {company ? `–ò–ü ${company} - ${shop}` : shop} | {client.address}
                          </option>
                        );
                      })}
                    </select>
                    <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                      <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                      </svg>
                    </div>
                  </div>
                </div>
                
                <button 
                  onClick={() => setShowNewClientModal(true)}
                  className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                >
                  <Plus size={16} />
                  –ù–æ–≤–∞—è —Ç–æ—á–∫–∞
                </button>

                {selectedClientData && (
                  <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-4 rounded-lg border border-blue-200">
                    <div className="space-y-2">
                      {/* –ò–∑–≤–ª–µ–∫–∞–µ–º –ò–ü –∏ –º–∞–≥–∞–∑–∏–Ω */}
                      {(() => {
                        const nameParts = selectedClientData.name.split(' - ');
                        const company = nameParts[0]?.replace(/^(–ò–ü\s*|–ö–æ–º–ø–∞–Ω–∏—è\s*|–¢–û–û\s*)/i, '').trim();
                        const shop = nameParts.slice(1).join(' - ') || selectedClientData.name;
                        
                        return (
                          <>
                            {company && (
                              <div className="flex items-center">
                                <span className="text-xs font-semibold text-blue-600 bg-blue-100 px-2 py-1 rounded-full mr-2">
                                  –ò–ü
                                </span>
                                <span className="text-sm font-medium text-blue-700">{company}</span>
                              </div>
                            )}
                            <h3 className="font-semibold text-gray-800 text-lg">
                              –ú–∞–≥–∞–∑–∏–Ω: {shop}
                            </h3>
                            <div className="flex items-start text-gray-600">
                              <svg className="w-4 h-4 mr-2 mt-0.5 flex-shrink-0 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                              </svg>
                              <span className="text-sm">{selectedClientData.address}</span>
                            </div>
                          </>
                        );
                      })()}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞ */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow-lg p-6 sticky top-4">
              <h2 className="text-lg font-semibold mb-4">–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞</h2>
              
              {selectedClientData && (
                <div className="mb-4 p-3 bg-gray-50 rounded-lg">
                  <p className="text-sm font-semibold">{selectedClientData.name}</p>
                  <p className="text-xs text-gray-600">{selectedClientData.address}</p>
                </div>
              )}

              <div className="mb-4 p-3 bg-blue-50 rounded-lg">
                <p className="text-sm"><strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:</strong> {new Date().toLocaleDateString('ru-RU')}</p>
                <p className="text-sm"><strong>–í—Ä–µ–º—è:</strong> {new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}</p>
              </div>

              <div className="mb-4">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm text-gray-600">–ü–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ:</span>
                  <span className="font-semibold">{getTotalItems()}</span>
                </div>
                
                <div className="flex justify-between items-center mb-4">
                  <span className="text-sm text-gray-600">–û–±—â–∞—è —Å—É–º–º–∞:</span>
                  <span className="text-lg font-bold text-blue-600">{getTotalPrice().toLocaleString()} —Ç–≥</span>
                </div>
              </div>

              {Object.keys(cart).length > 0 && (
                <div className="mb-4">
                  <div className="flex items-center gap-2 mb-3">
                    <Package className="text-green-600" size={16} />
                    <h3 className="text-sm font-semibold">–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:</h3>
                    <span className="bg-green-100 text-green-700 text-xs px-2 py-1 rounded-full">
                      {getTotalItems()} —à—Ç
                    </span>
                  </div>
                  
                  <div className="bg-white border border-gray-200 rounded-xl overflow-hidden shadow-sm">
                    {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã */}
                    <div className="bg-gradient-to-r from-gray-50 to-gray-100 px-4 py-3 grid grid-cols-12 gap-3 text-xs font-semibold text-gray-700 border-b border-gray-200">
                      <div className="col-span-5">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</div>
                      <div className="col-span-3 text-center">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</div>
                      <div className="col-span-2 text-right">–¶–µ–Ω–∞</div>
                      <div className="col-span-2 text-right">–°—É–º–º–∞</div>
                    </div>
                    
                    {/* –°—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ */}
                    <div className="max-h-48 overflow-y-auto">
                      {Object.entries(cart).map(([productId, qty]) => {
                        const product = products.find(p => p.id === productId);
                        if (!product) return null;
                        
                        const itemTotal = product.price * qty;
                        
                        return (
                          <div key={productId} className="px-4 py-3 grid grid-cols-12 gap-3 text-xs border-b border-gray-100 last:border-b-0 hover:bg-gray-25 transition-colors">
                            <div className="col-span-5 flex flex-col">
                              <div className="truncate font-medium text-gray-800" title={product.name}>
                                {product.name}
                              </div>
                              <div className="text-xs text-gray-500 mt-1">
                                {product.price.toLocaleString()} —Ç–≥ –∑–∞ {product.unit || '—à—Ç'}
                              </div>
                            </div>
                            <div className="col-span-3 flex flex-col items-center gap-2">
                              {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º */}
                              <div className="flex items-center gap-2 w-full">
                                <button 
                                  onClick={() => updateQuantity(productId, -1)}
                                  className="cart-button w-7 h-7 bg-red-50 hover:bg-red-100 active:bg-red-200 text-red-600 rounded-full text-sm flex items-center justify-center transition-all duration-150 hover:scale-110 shadow-sm"
                                  title="–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                                >
                                  ‚àí
                                </button>
                                
                                <div className="flex-1 flex flex-col items-center">
                                  <input
                                    type="number"
                                    value={cart[productId] === 0 ? '' : cart[productId]}
                                    onChange={(e) => setQuantityDirectly(productId, e.target.value)}
                                    onBlur={(e) => handleQuantityBlur(productId, e.target.value)}
                                    className="cart-input w-14 h-7 text-center border border-gray-300 rounded-md text-sm font-medium focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-200 transition-all"
                                    min="1"
                                    placeholder="1"
                                  />
                                  <span className="text-xs text-gray-400 mt-1">{product.unit || '—à—Ç'}</span>
                                </div>
                                
                                <button 
                                  onClick={() => updateQuantity(productId, 1)}
                                  className="cart-button w-7 h-7 bg-green-50 hover:bg-green-100 active:bg-green-200 text-green-600 rounded-full text-sm flex items-center justify-center transition-all duration-150 hover:scale-110 shadow-sm"
                                  title="–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                                >
                                  +
                                </button>
                              </div>
                              
                              {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
                              <button 
                                onClick={() => {
                                  setCart(prev => {
                                    const newCart = { ...prev };
                                    delete newCart[productId];
                                    return newCart;
                                  });
                                  setAddedProductNotification(`${product.name} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã`);
                                  setTimeout(() => setAddedProductNotification(null), 3000);
                                }}
                                className="cart-button w-16 h-5 bg-red-50 hover:bg-red-100 active:bg-red-200 text-red-600 rounded-full text-xs flex items-center justify-center transition-all duration-150 hover:scale-105 shadow-sm"
                                title="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"
                              >
                                –£–¥–∞–ª–∏—Ç—å
                              </button>
                            </div>
                            <div className="col-span-2 text-right self-center">
                              <div className="font-medium text-gray-700">
                                {product.price.toLocaleString()} —Ç–≥
                              </div>
                            </div>
                            <div className="col-span-2 text-right self-center">
                              <div className="font-bold text-green-600 text-sm">
                                {itemTotal.toLocaleString()} —Ç–≥
                              </div>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                    
                    {/* –ò—Ç–æ–≥–æ */}
                    <div className="bg-gradient-to-r from-green-50 to-emerald-50 px-4 py-4 grid grid-cols-12 gap-3 text-sm border-t border-green-200">
                      <div className="col-span-8 flex items-center">
                        <span className="font-bold text-gray-800 text-base">–ò–¢–û–ì–û:</span>
                        <div className="ml-3 flex items-center gap-2">
                          <span className="bg-green-100 text-green-700 text-xs px-2 py-1 rounded-full font-medium">
                            {getTotalItems()} —Ç–æ–≤–∞—Ä–æ–≤
                          </span>
                        </div>
                      </div>
                      <div className="col-span-2 text-right">
                        <span className="text-gray-600 font-medium">{getTotalItems()} —à—Ç</span>
                      </div>
                      <div className="col-span-2 text-right">
                        <span className="font-bold text-green-700 text-lg">
                          {getTotalPrice().toLocaleString()} —Ç–≥
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              <div className="mt-6 space-y-3">
                <button 
                  className={`w-full py-4 px-6 rounded-xl font-semibold text-lg transition-all duration-200 flex items-center justify-center gap-3 ${
                    !selectedClient || Object.keys(cart).length === 0 || isSubmitting
                      ? 'bg-gray-200 text-gray-500 cursor-not-allowed'
                      : 'bg-gradient-to-r from-green-600 to-emerald-600 text-white hover:from-green-700 hover:to-emerald-700 shadow-lg hover:shadow-xl transform hover:scale-105 active:scale-95'
                  }`}
                  disabled={!selectedClient || Object.keys(cart).length === 0 || isSubmitting}
                  onClick={handleSubmitOrder}
                >
                  {isSubmitting ? (
                    <>
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                      –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏...
                    </>
                  ) : (
                    <>
                      <Send size={20} />
                      –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
                      {Object.keys(cart).length > 0 && (
                        <span className="bg-white/20 px-2 py-1 rounded-full text-sm">
                          {getTotalItems()} —Ç–æ–≤–∞—Ä–æ–≤
                        </span>
                      )}
                    </>
                  )}
                </button>
                
                {/* –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
                {submitStatus === 'success' && (
                  <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg text-center flex items-center justify-center gap-2">
                    <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                    </svg>
                    –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!
                  </div>
                )}
                {submitStatus === 'error' && (
                  <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg text-center flex items-center justify-center gap-2">
                    <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                    –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ */}
      {showNewClientModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold">–ù–æ–≤–∞—è —Ç–æ—á–∫–∞ –ø—Ä–æ–¥–∞–∂</h3>
              <button 
                onClick={() => setShowNewClientModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X size={20} />
              </button>
            </div>
            
            <div className="space-y-4">
              <input 
                type="text"
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞"
                value={newClient.name}
                onChange={(e) => setNewClient(prev => ({...prev, name: e.target.value}))}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                required
              />
              
              <input 
                type="text"
                placeholder="–ê–¥—Ä–µ—Å —Ç–æ—á–∫–∏"
                value={newClient.address}
                onChange={(e) => setNewClient(prev => ({...prev, address: e.target.value}))}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                required
              />
            </div>
            
            <div className="flex gap-3 mt-6">
              <button 
                onClick={() => setShowNewClientModal(false)}
                className="flex-1 px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button 
                onClick={addNewClient}
                className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                disabled={!newClient.name || !newClient.address || isSubmitting}
              >
                {isSubmitting ? (
                  <div className="flex items-center justify-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    –°–æ–∑–¥–∞–Ω–∏–µ...
                  </div>
                ) : (
                  '–î–æ–±–∞–≤–∏—Ç—å'
                )}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
      {showImageModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-4 max-w-md">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</h3>
              <button 
                onClick={() => setShowImageModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X size={20} />
              </button>
            </div>
            <img 
              src={selectedImage} 
              alt="–¢–æ–≤–∞—Ä"
              className="w-full h-auto rounded-lg"
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default OrderFormPrototype;
