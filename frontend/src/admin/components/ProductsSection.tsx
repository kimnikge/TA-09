import React, { useState, useEffect } from 'react';
import { Package, Plus, Search, Edit, Trash2, Save, X, RotateCcw, EyeOff } from 'lucide-react';
import { supabase } from '../../supabaseClient';
import ImageUpload from '../../components/ImageUpload';

interface Product {
  id: string; // UUID –≤ Supabase
  name: string;
  price: number;
  unit: string | null;
  category: string;
  image_url?: string | null;
  active?: boolean;
}

interface ProductFormData {
  name: string;
  price: string;
  unit: string;
  category: string;
  image_url?: string;
}

const ProductsSection: React.FC = () => {
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [showInactive, setShowInactive] = useState(false);
  const [categories, setCategories] = useState<string[]>([]);
  const [units, setUnits] = useState<string[]>([]);
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);
  const [isNewCategory, setIsNewCategory] = useState(false);
  const [isNewUnit, setIsNewUnit] = useState(false);
  const [formData, setFormData] = useState<ProductFormData>({
    name: '',
    price: '',
    unit: '',
    category: '',
    image_url: ''
  });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
  useEffect(() => {
    loadProducts();
  }, []);

  const loadProducts = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('products')
        .select('*')
        .order('name');

      if (error) throw error;

      setProducts(data || []);
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Ç–æ–≤–∞—Ä–æ–≤
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º active:', 
        (data || []).map(p => ({ name: p.name, active: p.active, type: typeof p.active }))
      );
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const uniqueCategories = [...new Set((data || []).map(p => p.category))];
      setCategories(uniqueCategories);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
      const uniqueUnits = [...new Set((data || []).map(p => p.unit).filter(Boolean))];
      setUnits(uniqueUnits);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  const filteredProducts = products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.category.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = !selectedCategory || product.category === selectedCategory;
    // –¢–æ–≤–∞—Ä –∞–∫—Ç–∏–≤–µ–Ω, –µ—Å–ª–∏ active === true –∏–ª–∏ active === null/undefined (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–µ–Ω)
    const isActive = product.active !== false;
    const matchesActiveFilter = showInactive || isActive;
    return matchesSearch && matchesCategory && matchesActiveFilter;
  });

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
  const resetForm = () => {
    setFormData({
      name: '',
      price: '',
      unit: '',
      category: '',
      image_url: ''
    });
    setEditingProduct(null);
    setShowAddForm(false);
    setIsNewCategory(false);
    setIsNewUnit(false);
    setError('');
  };

  // –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  const startEdit = (product: Product) => {
    setEditingProduct(product);
    setFormData({
      name: product.name,
      price: product.price.toString(),
      unit: product.unit || '',
      category: product.category,
      image_url: product.image_url || ''
    });
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
    setIsNewCategory(!categories.includes(product.category));
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
    setIsNewUnit(product.unit ? !units.includes(product.unit) : false);
    setShowAddForm(true);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
  const saveProduct = async () => {
    try {
      setError('');
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!formData.name || !formData.price || !formData.unit || !formData.category) {
        setError('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
        return;
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (isNewCategory && formData.category.trim().length < 2) {
        setError('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
        return;
      }

      const price = parseFloat(formData.price);
      if (isNaN(price) || price <= 0) {
        setError('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
        return;
      }

      const productData = {
        name: formData.name.trim(),
        price: price,
        unit: formData.unit.trim() || null,
        category: formData.category.trim(),
        image_url: formData.image_url?.trim() || null
      };

      if (editingProduct) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        const { error } = await supabase
          .from('products')
          .update(productData)
          .eq('id', editingProduct.id);

        if (error) throw error;
        setSuccess('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      } else {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
        const { error } = await supabase
          .from('products')
          .insert([productData]);

        if (error) throw error;
        setSuccess('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
      }

      resetForm();
      loadProducts();
      
      // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      if (isNewCategory && formData.category && !categories.includes(formData.category)) {
        setCategories(prev => [...prev, formData.category].sort());
      }
      
      // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –µ–¥–∏–Ω–∏—Ü
      if (isNewUnit && formData.unit && !units.includes(formData.unit)) {
        setUnits(prev => [...prev, formData.unit].sort());
      }
      
      // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => setSuccess(''), 3000);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      setError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
  const deleteProduct = async (id: string, name: string) => {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä "${name}"?\n\n–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–∫–∞–∑–∞—Ö, –æ–Ω –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n–ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é.`)) {
      return;
    }

    try {
      console.log('üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', { id, name });
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–∞—Ö
      const { data: orderItems, error: checkError } = await supabase
        .from('order_items')
        .select('id')
        .eq('product_id', id)
        .limit(1);

      if (checkError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', checkError);
        throw checkError;
      }

      // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–∫–∞–∑–∞—Ö, –¥–µ–ª–∞–µ–º –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
      if (orderItems && orderItems.length > 0) {
        console.log('‚ö†Ô∏è –¢–æ–≤–∞—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–∫–∞–∑–∞—Ö, –≤—ã–ø–æ–ª–Ω—è–µ–º –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ');
        
        const { error: softDeleteError } = await supabase
          .from('products')
          .update({ active: false })
          .eq('id', id);

        if (softDeleteError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—è–≥–∫–æ–º —É–¥–∞–ª–µ–Ω–∏–∏:', softDeleteError);
          throw softDeleteError;
        }

        console.log('‚úÖ –¢–æ–≤–∞—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)');
        setSuccess('–¢–æ–≤–∞—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–∫–∞–∑–∞—Ö)');
      } else {
        // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –º–æ–∂–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å
        console.log('üóëÔ∏è –¢–æ–≤–∞—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–∫–∞–∑–∞—Ö, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ');
        
        const { error: deleteError } = await supabase
          .from('products')
          .delete()
          .eq('id', id);

        if (deleteError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏:', deleteError);
          throw deleteError;
        }

        console.log('‚úÖ –¢–æ–≤–∞—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω');
        setSuccess('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      }

      loadProducts();
      setTimeout(() => setSuccess(''), 3000);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      let errorMessage = '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞';
      
      if (error instanceof Error) {
        if (error.message.includes('foreign key constraint')) {
          errorMessage = '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–∫–∞–∑–∞—Ö';
        } else if (error.message.includes('permission denied')) {
          errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞';
        } else if (error.message.includes('Row Level Security')) {
          errorMessage = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';
        } else if (error.message.includes('duplicate key')) {
          errorMessage = '–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
        } else {
          errorMessage = `–û—à–∏–±–∫–∞: ${error.message}`;
        }
      }
      
      setError(errorMessage);
      setTimeout(() => setError(''), 5000);
    }
  };

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  const restoreProduct = async (id: string, name: string) => {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä "${name}"?`)) {
      return;
    }

    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', { id, name });
      
      const { error } = await supabase
        .from('products')
        .update({ active: true })
        .eq('id', id);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
        throw error;
      }

      console.log('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', { id, name });
      setSuccess('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      loadProducts();
      
      setTimeout(() => setSuccess(''), 3000);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      
      let errorMessage = '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞';
      
      if (error instanceof Error) {
        if (error.message.includes('permission denied')) {
          errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞';
        } else if (error.message.includes('Row Level Security')) {
          errorMessage = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';
        } else {
          errorMessage = `–û—à–∏–±–∫–∞: ${error.message}`;
        }
      }
      
      setError(errorMessage);
      setTimeout(() => setError(''), 5000);
    }
  };

  // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
  const deactivateProduct = async (id: string, name: string) => {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä "${name}"?\n\n–¢–æ–≤–∞—Ä –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç –æ—Ç –ø—Ä–æ–¥–∞–∂–∏.`)) {
      return;
    }

    try {
      console.log('üîí –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞:', { id, name });
      
      const { error } = await supabase
        .from('products')
        .update({ active: false })
        .eq('id', id);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
        throw error;
      }

      console.log('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', { id, name });
      setSuccess('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      loadProducts();
      
      setTimeout(() => setSuccess(''), 3000);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
      
      let errorMessage = '–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞';
      
      if (error instanceof Error) {
        if (error.message.includes('permission denied')) {
          errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞';
        } else if (error.message.includes('Row Level Security')) {
          errorMessage = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';
        } else {
          errorMessage = `–û—à–∏–±–∫–∞: ${error.message}`;
        }
      }
      
      setError(errorMessage);
      setTimeout(() => setError(''), 5000);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        <span className="ml-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</span>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
          <div className="mb-4 sm:mb-0">
            <h2 className="text-lg font-medium text-gray-900">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</h2>
            <p className="text-sm text-gray-500 mt-1">
              –î–æ–±–∞–≤–ª—è–π—Ç–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä–∞–º–∏
            </p>
            <div className="flex items-center space-x-4 mt-2">
              <span className="text-sm text-gray-600">
                –í—Å–µ–≥–æ: <span className="font-medium">{products.length}</span>
              </span>
              <span className="text-sm text-gray-600">
                –ê–∫—Ç–∏–≤–Ω—ã—Ö: <span className="font-medium text-green-600">{products.filter(p => p.active !== false).length}</span>
              </span>
              {products.filter(p => p.active === false).length > 0 && (
                <span className="text-sm text-gray-600">
                  –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: <span className="font-medium text-red-600">{products.filter(p => p.active === false).length}</span>
                </span>
              )}
            </div>
          </div>
          <button 
            onClick={() => setShowAddForm(true)}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center justify-center transition-colors"
          >
            <Plus className="w-4 h-4 mr-2" />
            <span className="hidden sm:inline">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</span>
            <span className="sm:hidden">–î–æ–±–∞–≤–∏—Ç—å</span>
          </button>
        </div>

        {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
        <div className="mb-6 space-y-4">
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
                <input
                  type="text"
                  placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>
            <select 
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white min-w-0 sm:min-w-[150px]"
            >
              <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
              {categories.map(category => (
                <option key={category} value={category}>{category}</option>
              ))}
            </select>
          </div>
          
          {/* –§–∏–ª—å—Ç—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ */}
          <div className="flex items-center">
            <input
              type="checkbox"
              id="showInactive"
              checked={showInactive}
              onChange={(e) => setShowInactive(e.target.checked)}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="showInactive" className="ml-2 text-sm text-gray-700">
              –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            </label>
          </div>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∏ —É—Å–ø–µ—Ö–µ */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-3 mb-4">
            <p className="text-red-600 text-sm">{error}</p>
          </div>
        )}
        
        {success && (
          <div className="bg-green-50 border border-green-200 rounded-lg p-3 mb-4">
            <p className="text-green-600 text-sm">{success}</p>
          </div>
        )}

        {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
        {filteredProducts.length === 0 ? (
          <div className="text-center py-12">
            <Package className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              {products.length === 0 ? '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤' : '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
            </h3>
            <p className="text-gray-500">
              {products.length === 0 
                ? '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"'
                : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞'
              }
            </p>
          </div>
        ) : (
          <>
            {/* –î–µ—Å–∫—Ç–æ–ø –≤–µ—Ä—Å–∏—è - —Ç–∞–±–ª–∏—Ü–∞ */}
            <div className="hidden lg:block overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –¢–æ–≤–∞—Ä
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –¶–µ–Ω–∞
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –ï–¥–∏–Ω–∏—Ü–∞
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –î–µ–π—Å—Ç–≤–∏—è
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredProducts.map((product) => (
                    <tr key={product.id} className={`hover:bg-gray-50 ${product.active === false ? 'bg-red-50 opacity-75' : ''}`}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className={`text-sm font-medium ${product.active === false ? 'text-red-700 line-through' : 'text-gray-900'}`}>
                            {product.name}
                          </div>
                          {product.active === false && (
                            <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                              –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
                            </span>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {product.image_url ? (
                          <img
                            src={product.image_url}
                            alt={product.name}
                            className="w-12 h-12 object-cover rounded-lg border"
                          />
                        ) : (
                          <div className="w-12 h-12 bg-gray-100 rounded-lg border flex items-center justify-center">
                            <Package className="w-6 h-6 text-gray-400" />
                          </div>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          {product.category}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {product.price.toLocaleString('ru-RU')} ‚ÇΩ
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {product.unit}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end space-x-2">
                          {product.active !== false ? (
                            <>
                              {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ */}
                              <button
                                onClick={() => startEdit(product)}
                                className="text-blue-600 hover:text-blue-900 p-1 rounded hover:bg-blue-50"
                                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                              >
                                <Edit className="w-4 h-4" />
                              </button>
                              <button
                                onClick={() => deleteProduct(product.id, product.name)}
                                className="text-red-600 hover:text-red-900 p-1 rounded hover:bg-red-50"
                                title="–£–¥–∞–ª–∏—Ç—å"
                              >
                                <Trash2 className="w-4 h-4" />
                              </button>
                            </>
                          ) : (
                            <>
                              {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ */}
                              <button
                                onClick={() => restoreProduct(product.id, product.name)}
                                className="text-green-600 hover:text-green-900 p-1 rounded hover:bg-green-50"
                                title="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
                              >
                                <RotateCcw className="w-4 h-4" />
                              </button>
                              <button
                                onClick={() => startEdit(product)}
                                className="text-blue-600 hover:text-blue-900 p-1 rounded hover:bg-blue-50"
                                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                              >
                                <Edit className="w-4 h-4" />
                              </button>
                            </>
                          )}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∫–∞—Ä—Ç–æ—á–∫–∏ */}
            <div className="lg:hidden space-y-4">
              {filteredProducts.map((product) => (
                <div key={product.id} className={`border border-gray-200 rounded-lg p-4 space-y-3 ${
                  product.active === false ? 'bg-red-50 border-red-200' : 'bg-white'
                }`}>
                  {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                  <div className="flex items-start space-x-3">
                    <div className="flex-shrink-0">
                      {product.image_url ? (
                        <img
                          src={product.image_url}
                          alt={product.name}
                          className={`w-16 h-16 object-cover rounded-lg border ${
                            product.active === false ? 'opacity-50 grayscale' : ''
                          }`}
                        />
                      ) : (
                        <div className={`w-16 h-16 bg-gray-100 rounded-lg border flex items-center justify-center ${
                          product.active === false ? 'opacity-50' : ''
                        }`}>
                          <Package className="w-8 h-8 text-gray-400" />
                        </div>
                      )}
                    </div>
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center justify-between mb-1">
                        <h3 className={`text-base font-medium ${
                          product.active === false ? 'text-red-700 line-through' : 'text-gray-900'
                        }`}>
                          {product.name}
                        </h3>
                        {product.active === false && (
                          <span className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                            –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
                          </span>
                        )}
                      </div>
                      <div className="flex items-center space-x-2 mb-2">
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          {product.category}
                        </span>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span className={`font-semibold text-lg ${
                          product.active === false ? 'text-red-700' : 'text-gray-900'
                        }`}>
                          {product.price.toLocaleString('ru-RU')} ‚ÇΩ
                        </span>
                        <span className="text-gray-500">–∑–∞ {product.unit}</span>
                      </div>
                    </div>
                  </div>

                  {/* –î–µ–π—Å—Ç–≤–∏—è */}
                  <div className="flex items-center justify-end space-x-1 sm:space-x-3 pt-3 border-t border-gray-100">
                    {/* –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç–æ–≤–∞—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–µ–Ω, –µ—Å–ª–∏ –Ω–µ false) */}
                    {product.active !== false ? (
                      <>
                        {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ */}
                        <button
                          onClick={() => startEdit(product)}
                          className="inline-flex items-center px-2 sm:px-3 py-2 text-xs sm:text-sm font-medium text-blue-600 hover:text-blue-900 hover:bg-blue-50 rounded-md transition-colors"
                          title="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä"
                        >
                          <Edit className="w-4 h-4 sm:mr-1" />
                          <span className="hidden sm:inline">–ò–∑–º–µ–Ω–∏—Ç—å</span>
                        </button>
                        <button
                          onClick={() => deactivateProduct(product.id, product.name)}
                          className="inline-flex items-center px-2 sm:px-3 py-2 text-xs sm:text-sm font-medium text-orange-600 hover:text-orange-900 hover:bg-orange-50 rounded-md transition-colors"
                          title="–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä"
                        >
                          <EyeOff className="w-4 h-4 sm:mr-1" />
                          <span className="hidden sm:inline">–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å</span>
                        </button>
                        <button
                          onClick={() => deleteProduct(product.id, product.name)}
                          className="inline-flex items-center px-2 sm:px-3 py-2 text-xs sm:text-sm font-medium text-red-600 hover:text-red-900 hover:bg-red-50 rounded-md transition-colors"
                          title="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"
                        >
                          <Trash2 className="w-4 h-4 sm:mr-1" />
                          <span className="hidden sm:inline">–£–¥–∞–ª–∏—Ç—å</span>
                        </button>
                      </>
                    ) : (
                      <>
                        {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ */}
                        <button
                          onClick={() => restoreProduct(product.id, product.name)}
                          className="inline-flex items-center px-2 sm:px-3 py-2 text-xs sm:text-sm font-medium text-green-600 hover:text-green-900 hover:bg-green-50 rounded-md transition-colors"
                          title="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
                        >
                          <RotateCcw className="w-4 h-4 sm:mr-1" />
                          <span className="hidden sm:inline">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</span>
                        </button>
                        <button
                          onClick={() => startEdit(product)}
                          className="inline-flex items-center px-2 sm:px-3 py-2 text-xs sm:text-sm font-medium text-blue-600 hover:text-blue-900 hover:bg-blue-50 rounded-md transition-colors"
                          title="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä"
                        >
                          <Edit className="w-4 h-4 sm:mr-1" />
                          <span className="hidden sm:inline">–ò–∑–º–µ–Ω–∏—Ç—å</span>
                        </button>
                      </>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ */}
      {showAddForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4 overflow-y-auto">
          <div className="bg-white rounded-lg p-4 sm:p-6 w-full max-w-2xl mx-auto my-8 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-gray-900">
                {editingProduct ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä' : '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'}
              </h3>
              <button
                onClick={resetForm}
                className="text-gray-400 hover:text-gray-600 p-1"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            <div className="space-y-4">
              {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *
                  </label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –¶–µ–Ω–∞ *
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    value={formData.price}
                    onChange={(e) => setFormData({...formData, price: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base"
                    placeholder="0.00"
                  />
                </div>
              </div>

              {/* –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è *
                  </label>
                  {!isNewUnit ? (
                    <div className="space-y-2">
                      {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –µ–¥–∏–Ω–∏—Ü */}
                      <select
                        value={formData.unit}
                        onChange={(e) => {
                          if (e.target.value === '__new__') {
                            setIsNewUnit(true);
                            setFormData({...formData, unit: ''});
                          } else {
                            setFormData({...formData, unit: e.target.value});
                          }
                        }}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base bg-white"
                      >
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è</option>
                        {/* –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è */}
                        <option value="—à—Ç">—à—Ç (—à—Ç—É–∫–∏)</option>
                        <option value="–∫–≥">–∫–≥ (–∫–∏–ª–æ–≥—Ä–∞–º–º—ã)</option>
                        <option value="–≥">–≥ (–≥—Ä–∞–º–º—ã)</option>
                        <option value="–ª">–ª (–ª–∏—Ç—Ä—ã)</option>
                        <option value="—É–ø–∞–∫">—É–ø–∞–∫ (—É–ø–∞–∫–æ–≤–∫–∏)</option>
                        {/* –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑ –±–∞–∑—ã */}
                        {units.filter(unit => !['—à—Ç', '–∫–≥', '–≥', '–ª', '—É–ø–∞–∫'].includes(unit)).map(unit => (
                          <option key={unit} value={unit}>{unit}</option>
                        ))}
                        <option value="__new__">+ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É</option>
                      </select>
                      
                      {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –µ–¥–∏–Ω–∏—Ü—ã */}
                      <button
                        type="button"
                        onClick={() => {
                          setIsNewUnit(true);
                          setFormData({...formData, unit: ''});
                        }}
                        className="w-full px-3 py-2 border border-dashed border-gray-300 rounded-lg text-gray-600 hover:text-gray-800 hover:border-gray-400 transition-colors text-sm"
                      >
                        + –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
                      </button>
                    </div>
                  ) : (
                    <div className="space-y-2">
                      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –µ–¥–∏–Ω–∏—Ü—ã */}
                      <input
                        type="text"
                        value={formData.unit}
                        onChange={(e) => setFormData({...formData, unit: e.target.value})}
                        className="w-full px-3 py-2 border border-green-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 text-base bg-green-50"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è"
                        autoFocus
                      />
                      
                      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                      <div className="flex gap-2">
                        <button
                          type="button"
                          onClick={() => {
                            setIsNewUnit(false);
                            setFormData({...formData, unit: ''});
                          }}
                          className="px-3 py-1 text-sm text-gray-600 hover:text-gray-800 border border-gray-300 rounded hover:bg-gray-50"
                        >
                          –û—Ç–º–µ–Ω–∞
                        </button>
                        <span className="text-xs text-green-600 flex items-center">
                          –ù–æ–≤–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞
                        </span>
                      </div>
                    </div>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ö–∞—Ç–µ–≥–æ—Ä–∏—è *
                  </label>
                  {!isNewCategory ? (
                    <div className="space-y-2">
                      {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
                      <select
                        value={formData.category}
                        onChange={(e) => {
                          if (e.target.value === '__new__') {
                            setIsNewCategory(true);
                            setFormData({...formData, category: ''});
                          } else {
                            setFormData({...formData, category: e.target.value});
                          }
                        }}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base bg-white"
                      >
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                        {categories.map(category => (
                          <option key={category} value={category}>{category}</option>
                        ))}
                        <option value="__new__">+ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                      </select>
                      
                      {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                      <button
                        type="button"
                        onClick={() => {
                          setIsNewCategory(true);
                          setFormData({...formData, category: ''});
                        }}
                        className="w-full px-3 py-2 border border-dashed border-gray-300 rounded-lg text-gray-600 hover:text-gray-800 hover:border-gray-400 transition-colors text-sm"
                      >
                        + –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                      </button>
                    </div>
                  ) : (
                    <div className="space-y-2">
                      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                      <input
                        type="text"
                        value={formData.category}
                        onChange={(e) => setFormData({...formData, category: e.target.value})}
                        className="w-full px-3 py-2 border border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base bg-blue-50"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                        autoFocus
                      />
                      
                      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                      <div className="flex gap-2">
                        <button
                          type="button"
                          onClick={() => {
                            setIsNewCategory(false);
                            setFormData({...formData, category: ''});
                          }}
                          className="px-3 py-1 text-sm text-gray-600 hover:text-gray-800 border border-gray-300 rounded hover:bg-gray-50"
                        >
                          –û—Ç–º–µ–Ω–∞
                        </button>
                        <span className="text-xs text-blue-600 flex items-center">
                          –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞
                        </span>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é —à–∏—Ä–∏–Ω—É */}
              <div>
                <ImageUpload
                  currentImageUrl={formData.image_url}
                  onImageChange={(imageUrl) => setFormData({...formData, image_url: imageUrl || ''})}
                />
              </div>
            </div>

            <div className="flex flex-col sm:flex-row gap-3 mt-6 pt-4 border-t border-gray-200">
              <button
                onClick={saveProduct}
                className="w-full sm:flex-1 bg-blue-600 text-white px-4 py-3 sm:py-2 rounded-lg hover:bg-blue-700 flex items-center justify-center transition-colors text-base"
              >
                <Save className="w-4 h-4 mr-2" />
                {editingProduct ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'}
              </button>
              <button
                onClick={resetForm}
                className="w-full sm:flex-1 bg-gray-300 text-gray-700 px-4 py-3 sm:py-2 rounded-lg hover:bg-gray-400 transition-colors text-base"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProductsSection;
