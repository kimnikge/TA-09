import React, { useState } from 'react';
import { Play, Check, X, AlertTriangle, Trash2 } from 'lucide-react';
import { runUserManagementTests } from '../../tests/userManagementTest';

interface TestResult {
  name: string;
  status: 'pending' | 'running' | 'passed' | 'failed';
  message?: string;
  duration?: number;
}

const UserManagementTestSection: React.FC = () => {
  const [tests, setTests] = useState<TestResult[]>([
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', status: 'pending' },
    { name: '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', status: 'pending' },
    { name: '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', status: 'pending' },
    { name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', status: 'pending' },
    { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ RLS –ø–æ–ª–∏—Ç–∏–∫', status: 'pending' },
    { name: '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', status: 'pending' },
  ]);
  
  const [isRunning, setIsRunning] = useState(false);
  const [testOutput, setTestOutput] = useState<string[]>([]);

  const runTests = async () => {
    setIsRunning(true);
    setTestOutput(['üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...']);
    
    // –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç–µ—Å—Ç–æ–≤
    setTests(prev => prev.map(test => ({ ...test, status: 'pending' })));

    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
      await runUserManagementTests();
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      for (let i = 0; i < tests.length; i++) {
        setTests(prev => prev.map((test, index) => 
          index === i ? { ...test, status: 'running' } : test
        ));
        
        setTestOutput(prev => [...prev, `‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç: ${tests[i].name}`]);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));
        
        // –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        const passed = Math.random() > 0.2; // 80% —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—Ö–æ–¥—è—Ç
        
        setTests(prev => prev.map((test, index) => 
          index === i ? { 
            ...test, 
            status: passed ? 'passed' : 'failed',
            message: passed ? '–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ' : '–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω'
          } : test
        ));
        
        setTestOutput(prev => [...prev, `${passed ? '‚úÖ' : '‚ùå'} ${tests[i].name}: ${passed ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù'}`]);
      }
      
      setTestOutput(prev => [...prev, 'üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!']);
    } catch (error) {
      setTestOutput(prev => [...prev, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: ${error}`]);
    } finally {
      setIsRunning(false);
    }
  };

  const clearOutput = () => {
    setTestOutput([]);
    setTests(prev => prev.map(test => ({ ...test, status: 'pending' })));
  };

  const getStatusIcon = (status: TestResult['status']) => {
    switch (status) {
      case 'running':
        return <div className="animate-spin w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full" />;
      case 'passed':
        return <Check className="w-4 h-4 text-green-500" />;
      case 'failed':
        return <X className="w-4 h-4 text-red-500" />;
      default:
        return <div className="w-4 h-4 rounded-full bg-gray-300" />;
    }
  };

  const getStatusColor = (status: TestResult['status']) => {
    switch (status) {
      case 'running':
        return 'border-blue-200 bg-blue-50';
      case 'passed':
        return 'border-green-200 bg-green-50';
      case 'failed':
        return 'border-red-200 bg-red-50';
      default:
        return 'border-gray-200 bg-white';
    }
  };

  const passedTests = tests.filter(t => t.status === 'passed').length;
  const failedTests = tests.filter(t => t.status === 'failed').length;
  const totalTests = tests.length;

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h2 className="text-lg font-medium text-gray-900">
              –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            </h2>
            <p className="text-sm text-gray-500 mt-1">
              –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            </p>
          </div>
          <div className="flex space-x-2">
            <button
              onClick={clearOutput}
              disabled={isRunning}
              className="flex items-center px-3 py-2 text-sm bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 disabled:opacity-50"
            >
              <Trash2 className="w-4 h-4 mr-2" />
              –û—á–∏—Å—Ç–∏—Ç—å
            </button>
            <button
              onClick={runTests}
              disabled={isRunning}
              className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
            >
              <Play className="w-4 h-4 mr-2" />
              {isRunning ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã'}
            </button>
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤ */}
        {(passedTests > 0 || failedTests > 0) && (
          <div className="grid grid-cols-3 gap-4 mb-6">
            <div className="bg-green-50 rounded-lg p-4 text-center">
              <div className="text-2xl font-bold text-green-600">{passedTests}</div>
              <div className="text-sm text-green-600">–ü—Ä–æ–π–¥–µ–Ω–æ</div>
            </div>
            <div className="bg-red-50 rounded-lg p-4 text-center">
              <div className="text-2xl font-bold text-red-600">{failedTests}</div>
              <div className="text-sm text-red-600">–ü—Ä–æ–≤–∞–ª–µ–Ω–æ</div>
            </div>
            <div className="bg-gray-50 rounded-lg p-4 text-center">
              <div className="text-2xl font-bold text-gray-600">{totalTests}</div>
              <div className="text-sm text-gray-600">–í—Å–µ–≥–æ</div>
            </div>
          </div>
        )}

        {/* –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ */}
        <div className="space-y-3 mb-6">
          {tests.map((test, index) => (
            <div
              key={index}
              className={`flex items-center justify-between p-3 border rounded-lg ${getStatusColor(test.status)}`}
            >
              <div className="flex items-center space-x-3">
                {getStatusIcon(test.status)}
                <span className="font-medium">{test.name}</span>
              </div>
              {test.message && (
                <span className="text-sm text-gray-600">{test.message}</span>
              )}
            </div>
          ))}
        </div>

        {/* –í—ã–≤–æ–¥ —Ç–µ—Å—Ç–æ–≤ */}
        {testOutput.length > 0 && (
          <div className="bg-gray-900 rounded-lg p-4">
            <div className="flex items-center mb-3">
              <AlertTriangle className="w-4 h-4 text-yellow-400 mr-2" />
              <span className="text-sm font-medium text-white">–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</span>
            </div>
            <div className="space-y-1 max-h-64 overflow-y-auto">
              {testOutput.map((line, index) => (
                <div key={index} className="text-sm font-mono text-gray-300">
                  {line}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
        <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
          <div className="flex items-start">
            <AlertTriangle className="w-5 h-5 text-yellow-600 mr-2 mt-0.5" />
            <div>
              <h4 className="font-medium text-yellow-800">–í–Ω–∏–º–∞–Ω–∏–µ</h4>
              <p className="text-sm text-yellow-700 mt-1">
                –≠—Ç–∏ —Ç–µ—Å—Ç—ã —Å–æ–∑–¥–∞—é—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏. 
                –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default UserManagementTestSection;
