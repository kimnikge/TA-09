// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ë–î
// –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ http://localhost:5174

(async function checkAllTables() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const tablesToCheck = [
        'clients', 
        'products', 
        'orders',
        'users',
        'categories',
        'inventory',
        'sales',
        'order_items'
    ];
    
    const results = {};
    
    for (const tableName of tablesToCheck) {
        try {
            console.log(`üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É: ${tableName}`);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
            const { data, error } = await supabase
                .from(tableName)
                .select('*')
                .limit(1);
            
            if (error) {
                if (error.message.includes('does not exist')) {
                    console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                    results[tableName] = { exists: false, error: error.message };
                } else {
                    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ${tableName}:`, error.message);
                    results[tableName] = { exists: true, error: error.message, columns: null };
                }
            } else {
                console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName} –¥–æ—Å—Ç—É–ø–Ω–∞`);
                
                if (data && data.length > 0) {
                    const columns = Object.keys(data[0]);
                    console.log(`üìä –ö–æ–ª–æ–Ω–∫–∏ –≤ ${tableName}:`, columns);
                    results[tableName] = { exists: true, columns: columns, sampleData: data[0] };
                } else {
                    console.log(`üìä –¢–∞–±–ª–∏—Ü–∞ ${tableName} –ø—É—Å—Ç–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É...`);
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π insert –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                    const testResult = await supabase
                        .from(tableName)
                        .insert({})
                        .select();
                    
                    results[tableName] = { 
                        exists: true, 
                        columns: null, 
                        isEmpty: true,
                        insertError: testResult.error?.message 
                    };
                }
            }
            
        } catch (error) {
            console.log(`üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${tableName}:`, error.message);
            results[tableName] = { exists: false, error: error.message };
        }
        
        console.log('---');
    }
    
    console.log('\nüìã –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:');
    console.log('==================');
    
    Object.entries(results).forEach(([tableName, info]) => {
        if (info.exists) {
            console.log(`‚úÖ ${tableName}:`);
            if (info.columns) {
                console.log(`   –ö–æ–ª–æ–Ω–∫–∏: ${info.columns.join(', ')}`);
            }
            if (info.isEmpty) {
                console.log(`   –°—Ç–∞—Ç—É—Å: —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞`);
            }
            if (info.error) {
                console.log(`   –û—à–∏–±–∫–∞: ${info.error}`);
            }
        } else {
            console.log(`‚ùå ${tableName}: –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
    });
    
    return results;
})();
