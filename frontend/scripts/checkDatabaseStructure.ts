import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://olutrxiazrmanrgzzwmb.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9sdXRyeGlhenJtYW5yZ3p6d21iIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA4NzMwMjEsImV4cCI6MjA2NjQ0OTAyMX0.qxU_1Fjk4Mu9vMSfEI4jSGm3yYhh9WbmlSEFttOMKiM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkDatabaseStructure() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–∞–ø—Ä—è–º—É—é
    const tablesToCheck = ['products', 'clients', 'orders', 'order_items', 'profiles'];
    
    for (const tableName of tablesToCheck) {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É: ${tableName}`);
      
      try {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –µ—ë —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        const { data: sampleData, error: dataError } = await supabase
          .from(tableName)
          .select('*')
          .limit(1);

        if (dataError) {
          console.log(`  ‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:`, dataError.message);
          console.log(`     –ö–æ–¥ –æ—à–∏–±–∫–∏: ${dataError.code}`);
        } else {
          console.log(`  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞`);
          if (sampleData && sampleData.length > 0) {
            console.log(`  üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏):`);
            const firstRecord = sampleData[0];
            Object.entries(firstRecord).forEach(([key, value]) => {
              const valueType = typeof value;
              const displayValue = value === null ? 'null' : String(value).substring(0, 50);
              console.log(`     - ${key}: ${valueType} (${displayValue})`);
            });
          } else {
            console.log(`  üìù –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è`);
          }
          
          // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
          const { count, error: countError } = await supabase
            .from(tableName)
            .select('*', { count: 'exact', head: true });

          if (!countError) {
            console.log(`  üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${count}`);
          }
        }
      } catch (tableError) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, tableError);
      }
      
      console.log('');
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkDatabaseStructure()
  .then(() => {
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
    process.exit(1);
  });
