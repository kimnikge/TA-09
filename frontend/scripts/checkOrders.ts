import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://olutrxiazrmanrgzzwmb.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9sdXRyeGlhenJtYW5yZ3p6d21iIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA4NzMwMjEsImV4cCI6MjA2NjQ0OTAyMX0.qxU_1Fjk4Mu9vMSfEI4jSGm3yYhh9WbmlSEFttOMKiM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkOrders() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã (–±–µ–∑ —Å–≤—è–∑–µ–π –ø–æ–∫–∞)
    const { data: orders, error: ordersError } = await supabase
      .from('orders')
      .select('*')
      .order('created_at', { ascending: false });

    if (ordersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', ordersError);
      return;
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orders?.length || 0}\n`);

    if (orders && orders.length > 0) {
      for (const order of orders) {
        console.log(`üßæ –ó–∞–∫–∞–∑ #${order.id}`);
        console.log(`   üìÖ –î–∞—Ç–∞: ${new Date(order.created_at).toLocaleString('ru-RU')}`);
        console.log(`   üë§ ID –ú–µ–Ω–µ–¥–∂–µ—Ä–∞: ${order.rep_id}`);
        console.log(`   üè¢ ID –ö–ª–∏–µ–Ω—Ç–∞: ${order.client_id}`);
        console.log(`   üöö –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${order.delivery_date}`);
        console.log(`   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: ${order.total_items}`);
        console.log(`   üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${order.total_price?.toLocaleString()} ‚Ç∏`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        const { data: manager } = await supabase
          .from('profiles')
          .select('name, email')
          .eq('id', order.rep_id)
          .single();
        
        if (manager) {
          console.log(`   üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: ${manager.name} (${manager.email})`);
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        const { data: client } = await supabase
          .from('clients')
          .select('name, company_name, address')
          .eq('id', order.client_id)
          .single();
        
        if (client) {
          console.log(`   üè¢ –ö–ª–∏–µ–Ω—Ç: ${client.name}`);
          console.log(`   üè≠ –ö–æ–º–ø–∞–Ω–∏—è: ${client.company_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
          console.log(`   üìç –ê–¥—Ä–µ—Å: ${client.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        const { data: items, error: itemsError } = await supabase
          .from('order_items')
          .select('*')
          .eq('order_id', order.id);

        if (itemsError) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: ${itemsError.message}`);
        } else if (items && items.length > 0) {
          console.log(`   üìù –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞:`);
          for (const item of items) {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            const { data: product } = await supabase
              .from('products')
              .select('name, price, unit')
              .eq('id', item.product_id)
              .single();

            console.log(`      ‚Ä¢ ${product?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'}`);
            console.log(`        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} ${item.unit || '—à—Ç'}`);
            console.log(`        –¶–µ–Ω–∞: ${item.price?.toLocaleString()} ‚Ç∏`);
            console.log(`        –°—É–º–º–∞: ${(item.price * item.quantity)?.toLocaleString()} ‚Ç∏`);
            if (item.comment) {
              console.log(`        –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${item.comment}`);
            }
          }
        } else {
          console.log(`   ‚ùå –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        }
        
        console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏
      }
    } else {
      console.log('üìù –ó–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç');
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkOrders()
  .then(() => {
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
