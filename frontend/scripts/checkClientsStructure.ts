import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://olutrxiazrmanrgzzwmb.supabase.co';
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9sdXRyeGlhenJtYW5yZ3p6d21iIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA4NzMwMjEsImV4cCI6MjA2NjQ0OTAyMX0.qxU_1Fjk4Mu9vMSfEI4jSGm3yYhh9WbmlSEFttOMKiM';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function checkClientsStructure() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã clients...');
  console.log('=' .repeat(50));

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã clients
    const { data, error } = await supabase
      .from('clients')
      .select('*')
      .limit(1);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
      return;
    }

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ clients –¥–æ—Å—Ç—É–ø–Ω–∞');
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const { data: clients, error: clientsError } = await supabase
      .from('clients')
      .select('*')
      .limit(5);

    if (clientsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤:', clientsError.message);
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: ${clients?.length || 0}`);
    
    if (clients && clients.length > 0) {
      console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞:');
      const firstClient = clients[0];
      Object.keys(firstClient).forEach(key => {
        console.log(`   ${key}: ${typeof firstClient[key]} (${firstClient[key]})`);
      });
      
      console.log('\nüìù –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã:');
      clients.forEach((client, index) => {
        console.log(`   ${index + 1}. ${client.name} - ${client.address}`);
      });
    } else {
      console.log('üìù –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç–∞');
    }

  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkClientsStructure();
