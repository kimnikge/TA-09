import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

const supabaseUrl = process.env.VITE_SUPABASE_URL || 'http://localhost:54321';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || '';

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è VITE_SUPABASE_URL –∏–ª–∏ VITE_SUPABASE_ANON_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function createStorageBucket() {
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ bucket –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤...');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ bucket
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è bucket product-images...');
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    if (bucketsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ buckets:', bucketsError.message);
      return;
    }
    
    const productImagesBucket = buckets.find(bucket => bucket.id === 'product-images');
    if (productImagesBucket) {
      console.log('‚úÖ Bucket product-images —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ bucket:', {
        id: productImagesBucket.id,
        name: productImagesBucket.name,
        public: productImagesBucket.public,
        file_size_limit: productImagesBucket.file_size_limit,
        allowed_mime_types: productImagesBucket.allowed_mime_types
      });
      return;
    }

    // 2. –°–æ–∑–¥–∞–µ–º bucket
    console.log('2. –°–æ–∑–¥–∞–Ω–∏–µ bucket product-images...');
    const { data: createBucketData, error: createBucketError } = await supabase.storage
      .createBucket('product-images', {
        public: true,
        fileSizeLimit: 5 * 1024 * 1024, // 5MB
        allowedMimeTypes: ['image/jpeg', 'image/png', 'image/webp', 'image/gif']
      });

    if (createBucketError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bucket:', createBucketError.message);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      console.log('3. –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ bucket...');
      const { data: simpleBucketData, error: simpleBucketError } = await supabase.storage
        .createBucket('product-images', {
          public: true
        });

      if (simpleBucketError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ bucket:', simpleBucketError.message);
        return;
      }
      
      console.log('‚úÖ –ü—Ä–æ—Å—Ç–æ–π bucket —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('üìä –î–∞–Ω–Ω—ã–µ bucket:', simpleBucketData);
    } else {
      console.log('‚úÖ Bucket —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('üìä –î–∞–Ω–Ω—ã–µ bucket:', createBucketData);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
    console.log('4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ bucket...');
    const { data: updatedBuckets, error: updatedBucketsError } = await supabase.storage.listBuckets();
    if (updatedBucketsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ buckets:', updatedBucketsError.message);
      return;
    }
    
    const newBucket = updatedBuckets.find(bucket => bucket.id === 'product-images');
    if (newBucket) {
      console.log('‚úÖ Bucket product-images —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞–π–¥–µ–Ω');
      console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ bucket:', {
        id: newBucket.id,
        name: newBucket.name,
        public: newBucket.public,
        file_size_limit: newBucket.file_size_limit,
        allowed_mime_types: newBucket.allowed_mime_types
      });
    } else {
      console.log('‚ö†Ô∏è  Bucket product-images –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    console.log('5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–∏—Ç–∏–∫ –¥–æ—Å—Ç—É–ø–∞...');
    const { error: policiesError } = await supabase.storage
      .from('product-images')
      .list();

    if (policiesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ bucket (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω—ã –ø–æ–ª–∏—Ç–∏–∫–∏):', policiesError.message);
      console.log('üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –≤ Supabase Dashboard');
    } else {
      console.log('‚úÖ Bucket –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π');
    }

    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase Storage –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –≤ Supabase Dashboard');
    console.log('   2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');

  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
createStorageBucket();
