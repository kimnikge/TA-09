import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://olutrxiazrmanrgzzwmb.supabase.co'
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9sdXRyeGlhenJtYW5yZ3p6d21iIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA4NzMwMjEsImV4cCI6MjA2NjQ0OTAyMX0.qxU_1Fjk4Mu9vMSfEI4jSGm3yYhh9WbmlSEFttOMKiM'

const supabase = createClient(supabaseUrl, supabaseKey)

async function testClientAndOrderCreation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–∫–∞–∑–∞...\n')

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è
    console.log('1Ô∏è‚É£ –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è...')
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*')
      .eq('role', 'sales_rep')
      .limit(1)

    if (profilesError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è: ${profilesError.message}`)
    }

    if (!profiles || profiles.length === 0) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å')
    }

    const salesRep = profiles[0]
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å: ${salesRep.name} (${salesRep.email})`)

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...')
    const testClientName = `–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç ${Date.now()}`
    const testClientAddress = '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 123'

    const { data: newClient, error: clientError } = await supabase
      .from('clients')
      .insert([
        {
          name: testClientName,
          address: testClientAddress,
          created_by: salesRep.id
        }
      ])
      .select()
      .single()

    if (clientError) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${clientError.message}`)
    }

    console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${newClient.name} (ID: ${newClient.id})`)

    // 3. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞
    console.log('\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...')
    const { data: products, error: productsError } = await supabase
      .from('products')
      .select('*')
      .eq('active', true)
      .limit(2)

    if (productsError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: ${productsError.message}`)
    }

    if (!products || products.length === 0) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤')
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`)
    products.forEach((product, index) => {
      console.log(`   ${index + 1}. ${product.name} - ${product.price} —Ä—É–±.`)
    })

    // 4. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    console.log('\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...')
    const deliveryDate = new Date()
    deliveryDate.setDate(deliveryDate.getDate() + 1)

    const totalItems = products.length
    const totalPrice = products.reduce((sum, product) => sum + product.price, 0)

    const { data: newOrder, error: orderError } = await supabase
      .from('orders')
      .insert([
        {
          rep_id: salesRep.id,
          client_id: newClient.id,
          delivery_date: deliveryDate.toISOString().split('T')[0],
          total_items: totalItems,
          total_price: totalPrice
        }
      ])
      .select()
      .single()

    if (orderError) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${orderError.message}`)
    }

    console.log(`‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ID ${newOrder.id}`)

    // 5. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
    console.log('\n5Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞...')
    const orderItems = products.map(product => ({
      order_id: newOrder.id,
      product_id: product.id,
      quantity: 1,
      price: product.price,
      unit: product.unit || '—à—Ç',
      comment: `–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è ${product.name}`
    }))

    const { error: itemsError } = await supabase
      .from('order_items')
      .insert(orderItems)

    if (itemsError) {
      throw new Error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: ${itemsError.message}`)
    }

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: ${orderItems.length}`)

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞...')
    const { data: orderCheck, error: orderCheckError } = await supabase
      .from('orders')
      .select(`
        *,
        clients(name, address),
        order_items(*, products(name, price))
      `)
      .eq('id', newOrder.id)
      .single()

    if (orderCheckError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–∞: ${orderCheckError.message}`)
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ
    const { data: repInfo } = await supabase
      .from('profiles')
      .select('name, email')
      .eq('id', orderCheck.rep_id)
      .single()

    console.log('\n‚úÖ –ó–ê–ö–ê–ó –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù:')
    console.log(`   –ó–∞–∫–∞–∑ ID: ${orderCheck.id}`)
    console.log(`   –ö–ª–∏–µ–Ω—Ç: ${orderCheck.clients?.name}`)
    console.log(`   –ê–¥—Ä–µ—Å: ${orderCheck.clients?.address}`)
    console.log(`   –¢–æ—Ä–≥–æ–≤—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å: ${repInfo?.name || '–ù–µ –Ω–∞–π–¥–µ–Ω'}`)
    console.log(`   –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${orderCheck.delivery_date}`)
    console.log(`   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${orderCheck.total_price} —Ä—É–±.`)
    console.log(`   –ü–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ: ${orderCheck.order_items?.length}`)

    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!')
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testClientAndOrderCreation()
