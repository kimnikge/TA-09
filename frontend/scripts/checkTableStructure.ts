import { createClient } from '@supabase/supabase-js'
import * as fs from 'fs'
import * as path from 'path'

// –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª
const envPath = path.join(process.cwd(), '.env')
const envFile = fs.readFileSync(envPath, 'utf8')

const env: Record<string, string> = {}
envFile.split('\n').forEach(line => {
  const [key, ...valueParts] = line.split('=')
  if (key && valueParts.length > 0) {
    env[key.trim()] = valueParts.join('=').trim()
  }
})

const supabase = createClient(
  env.VITE_SUPABASE_URL || 'http://localhost:54321',
  env.VITE_SUPABASE_ANON_KEY || 'your-anon-key'
)

async function checkTableStructure() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü...')
  
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã profiles —á–µ—Ä–µ–∑ select *
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*')
      .limit(1)
    
    if (profilesError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ profiles:', profilesError.message)
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ profiles –¥–æ—Å—Ç—É–ø–Ω–∞')
      if (profiles && profiles.length > 0) {
        console.log('üìä –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ profiles:')
        console.log(profiles[0])
        console.log('üîë –ö–æ–ª–æ–Ω–∫–∏:', Object.keys(profiles[0]))
      } else {
        console.log('üìä –¢–∞–±–ª–∏—Ü–∞ profiles –ø—É—Å—Ç–∞—è')
      }
    }
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∑–∞–ø–∏—Å—å
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É –≤ profiles...')
    const testId = 'test-user-id-123'
    
    const { error: insertError } = await supabase
      .from('profiles')
      .insert({
        id: testId,
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        role: 'sales_rep',
        approved: false
      })
    
    if (insertError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏:', insertError.message)
      console.log('üìù –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', insertError)
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞')
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await supabase
        .from('profiles')
        .delete()
        .eq('id', testId)
      
      console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞')
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    const tables = ['profiles', 'clients', 'products', 'orders', 'order_items']
    
    for (const table of tables) {
      try {
        const { error } = await supabase
          .from(table)
          .select('*')
          .limit(1)
        
        if (error) {
          console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${error.message}`)
        } else {
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: –¥–æ—Å—Ç—É–ø–Ω–∞`)
        }
      } catch {
        console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`)
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

checkTableStructure()
