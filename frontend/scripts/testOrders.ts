import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://olutrxiazrmanrgzzwmb.supabase.co';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9sdXRyeGlhenJtYW5yZ3p6d21iIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA4NzMwMjEsImV4cCI6MjA2NjQ0OTAyMX0.qxU_1Fjk4Mu9vMSfEI4jSGm3yYhh9WbmlSEFttOMKiM';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkOrdersStructure() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü –∑–∞–∫–∞–∑–æ–≤...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É orders
  console.log('üìã –¢–∞–±–ª–∏—Ü–∞ orders:');
  try {
    const { error } = await supabase
      .from('orders')
      .select('*')
      .limit(0);
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ orders:', error.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ orders –¥–æ—Å—Ç—É–ø–Ω–∞');
    }
  } catch (err) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ orders:', err);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É order_items
  console.log('\nüìã –¢–∞–±–ª–∏—Ü–∞ order_items:');
  try {
    const { error } = await supabase
      .from('order_items')
      .select('*')
      .limit(0);
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ order_items:', error.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ order_items –¥–æ—Å—Ç—É–ø–Ω–∞');
    }
  } catch (err) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ order_items:', err);
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...');
  try {
    const testOrder = {
      rep_id: 'a0fc8606-9785-4f43-b2a1-2147bcee3a6a', // UUID –∏–∑ profiles
      client_id: '9562fc55-a257-452f-a29f-54a2ecb1af1c', // UUID –∏–∑ clients
      delivery_date: '2025-07-01',
      total_items: 1,
      total_price: 100,
    };
    
    console.log('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', testOrder);
    
    const { data, error } = await supabase
      .from('orders')
      .insert([testOrder])
      .select()
      .single();
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞:', error);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', data);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
      await supabase.from('orders').delete().eq('id', data.id);
      console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω');
    }
  } catch (err) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
  }
}

checkOrdersStructure()
  .then(() => {
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
