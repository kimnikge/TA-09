import { createClient } from '@supabase/supabase-js'
import * as fs from 'fs'
import * as path from 'path'

// –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª
const envPath = path.join(process.cwd(), '.env')
const envFile = fs.readFileSync(envPath, 'utf8')

const env: Record<string, string> = {}
envFile.split('\n').forEach(line => {
  const [key, ...valueParts] = line.split('=')
  if (key && valueParts.length > 0) {
    env[key.trim()] = valueParts.join('=').trim()
  }
})

const supabase = createClient(
  env.VITE_SUPABASE_URL || 'http://localhost:54321',
  env.VITE_SUPABASE_ANON_KEY || 'your-anon-key'
)

async function updateTableStructure() {
  console.log('üîß –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã profiles...')
  
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –æ–±—ã—á–Ω–æ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç service role key, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ RPC
    
    console.log('‚ö†Ô∏è  –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∫–æ–º–∞–Ω–¥—ã –≤ Supabase Dashboard')
    console.log('')
    console.log('üìã SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ SQL Editor:')
    console.log('')
    
    const sqlCommands = `
-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É profiles
ALTER TABLE profiles 
ADD COLUMN IF NOT EXISTS email TEXT UNIQUE,
ADD COLUMN IF NOT EXISTS name TEXT,
ADD COLUMN IF NOT EXISTS role TEXT CHECK (role IN ('admin', 'sales_rep')) DEFAULT 'sales_rep',
ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();

-- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
UPDATE profiles 
SET 
  role = 'sales_rep',
  name = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
  updated_at = NOW()
WHERE role IS NULL OR name IS NULL;

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

DROP TRIGGER IF EXISTS update_profiles_updated_at ON profiles;
CREATE TRIGGER update_profiles_updated_at 
  BEFORE UPDATE ON profiles
  FOR EACH ROW 
  EXECUTE FUNCTION update_updated_at_column();

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
SELECT column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name = 'profiles' 
ORDER BY ordinal_position;
`
    
    console.log(sqlCommands)
    console.log('')
    console.log('üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:')
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard')
    console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor')
    console.log('3. –í—Å—Ç–∞–≤—å—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ')
    console.log('4. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
    console.log('')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
    const { data: testData, error: testError } = await supabase
      .from('profiles')
      .select('id, email, name, role, approved, created_at, updated_at')
      .limit(1)
    
    if (!testError) {
      console.log('‚úÖ –ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞!')
      console.log('üìä –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ:', Object.keys(testData?.[0] || {}))
      return true
    } else {
      console.log('‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
      console.log('üîç –û—à–∏–±–∫–∞:', testError.message)
      return false
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
    return false
  }
}

updateTableStructure()
