import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'
import { readFileSync } from 'fs'
import { join } from 'path'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config()

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase credentials')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function applySoftDeleteMigration() {
  try {
    console.log('üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è...')
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlContent = readFileSync(join(process.cwd(), '..', 'ADD_SOFT_DELETE_CLIENTS.sql'), 'utf8')
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = sqlContent
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd && !cmd.startsWith('--'))
    
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${commands.length}`)
    
    for (let i = 0; i < commands.length; i++) {
      const command = commands[i].trim()
      if (!command) continue
      
      console.log(`‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ${i + 1}/${commands.length}...`)
      
      try {
        const { error } = await supabase.rpc('exec_sql', { sql: command })
        if (error) {
          console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}: ${error.message}`)
        } else {
          console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
        }
      } catch (err) {
        console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}: ${err.message}`)
      }
    }
    
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
    const { data: columns, error: columnsError } = await supabase
      .from('clients')
      .select('*')
      .limit(1)
    
    if (columnsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:', columnsError)
      return
    }
    
    if (columns && columns.length > 0) {
      const columnNames = Object.keys(columns[0])
      console.log('üìä –¢–µ–∫—É—â–∏–µ –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã clients:', columnNames)
      
      if (columnNames.includes('deleted_at')) {
        console.log('‚úÖ –ü–æ–ª–µ deleted_at —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
      } else {
        console.log('‚ùå –ü–æ–ª–µ deleted_at –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
  }
}

applySoftDeleteMigration()
